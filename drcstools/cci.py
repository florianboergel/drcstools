# AUTOGENERATED! DO NOT EDIT! File to edit: 05_cci.ipynb (unless otherwise specified).

__all__ = ['stormdetection']

# Cell
import xarray as xr
import numpy as np
import matplotlib.pyplot as plt

# Cell
from .derivative import *
from .storm import *

def stormdetection(stormobj, slpname = "slp", pmax = 100000):

    stormobj.derivative(slpname, N = 20, dim = stormobj._get_name_longitude(), order = 1)
    stormobj.derivative(slpname, N = 20, dim = stormobj._get_name_latitude(), order = 1)

    stormobj.derivative(slpname, N = 20, dim = stormobj._get_name_longitude(), order = 2)
    stormobj.derivative(slpname, N = 20, dim = stormobj._get_name_latitude(), order = 2)

    zero_crossings_x = xr.where(xr.ufuncs.signbit(stormobj.ds["dd{}{}".format(stormobj._get_name_longitude(),
                                                                                slpname)]).astype(int).diff("lon") != 0, 1, 0)
    zero_crossings_y = xr.where(xr.ufuncs.signbit(stormobj.ds["dd{}{}".format(stormobj._get_name_latitude(),
                                                                                slpname)]).astype(int).diff("lat") != 0, 1, 0)
    zero_crossings = xr.where((zero_crossings_x == 1) & (zero_crossings_y == 1), 1, 0)

    dP = 0.5 * (stormobj.ds["dd{}{}".format(stormobj._get_name_longitude(), slpname)] + stormobj.ds["dd{}{}".format(stormobj._get_name_latitude(), slpname)])

    Pzonal = dP.mean([stormobj._get_name_time(), stormobj._get_name_latitude()])

    lows = stormobj.ds[slpname].where(zero_crossings == 1).where(dP - Pzonal < 0)
    dP = dP.where(lows < pmax)
    lows = lows.where(lows < pmax)

    stormobj.ds["lows"] = lows
    stormobj.ds["dP"] = dP
    return stormobj


# def stormtracking(storm)